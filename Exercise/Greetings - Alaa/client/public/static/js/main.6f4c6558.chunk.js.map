{"version":3,"sources":["components/Button.js","components/Form.js","components/BookSearch.js","App.js","reportWebVitals.js","index.js"],"names":["Button","onClick","innerText","className","key","type","style","Form","useState","massage","state","confirmMassage","setConfirmMassage","onSubmit","e","preventDefault","name","placeholder","inputs","document","querySelector","values","map","input","value","bookInfo","year","Number","author","fetch","method","headers","body","JSON","stringify","then","r","json","data","success","error","setTimeout","BookSearch","selectedBooks","setSelectedBooks","searchInput","bookName","books","book","index","App","target","tagName","toLowerCase","parentNode","querySelectorAll","forEach","tab","classList","remove","add","toggleClassName","to","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.6f4c6558.chunk.js","sourcesContent":["\r\n\r\nfunction Button({onClick, innerText, className,key='', type='text' ,style=''}){\r\n\r\n    return(\r\n        <button key={key} onClick={onClick} type={type} className={className}>  {innerText} </button>\r\n    );\r\n}\r\n\r\nexport default Button;","import { useState } from 'react';\r\n// import { Link } from 'react-router-dom';\r\nimport Button from './Button';\r\n\r\nfunction Form() {\r\n    const [confirmMassage, setConfirmMassage] = useState({ massage: '', state: false });\r\n    function addBook() {\r\n\r\n        let inputs = [document.querySelector('[name=\"name\"]'),document.querySelector('[name=\"year\"]'),document.querySelector('[name=\"author\"]')];\r\n        let values = inputs.map(input => input.value);\r\n        inputs.map(input => input.value = '');\r\n        let bookInfo = {\r\n            name: values[0],\r\n            year: Number(values[1]),\r\n            author: values[2]\r\n        };\r\n        fetch('/add-book', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }, body: JSON.stringify({ bookInfo })\r\n        })\r\n            .then(r => r.json())\r\n            .then(data => {\r\n                let massage = data.success ? 'The Book Was Added Successfully' :\r\n                    (data.error ? data.error : 'Something went wrong! try again later');\r\n                setConfirmMassage({ massage: massage, state: true });\r\n                setTimeout(() => {\r\n                    setConfirmMassage({ massage: '', state: false });\r\n                }, 10000);\r\n            });\r\n    }\r\n    return (\r\n        <form className='body' onSubmit={(e) => e.preventDefault()}>\r\n            <div className=\"add-input\">\r\n                <input name='name' className='template-input' placeholder=\"add book's name\"></input>\r\n                <input name='year' className='template-input' placeholder=\"add book's year of publish\"></input>\r\n                <input name='author' className='template-input' placeholder=\"add author's name\"></input>\r\n                <Button onClick={addBook} innerText='Add Book' type='submit' />\r\n            </div >\r\n\r\n            {confirmMassage.state ? <div className='confim-massage'> <h2> {confirmMassage.massage}</h2></div> : ''}\r\n            {/* <div className=\"lottery-btn hide\">\r\n                <Link to=\"/confirmation\" >\r\n                    <Button onClick={goToLottery} innerText=' Go To Lottery' /> \r\n                </Link>\r\n            </div > */}\r\n        </form >\r\n    );\r\n}\r\n\r\nexport default Form;","\r\nimport { useState } from \"react\";\r\nimport Button from './Button';\r\nimport './BookSearch.css';\r\n\r\nfunction BookSearch() {\r\n\r\n  const [selectedBooks, setSelectedBooks] = useState([]);\r\n  function getBook() {\r\n    let searchInput = document.querySelector('[name=\"search\"]');\r\n    let bookName = !!searchInput && searchInput.value;\r\n    searchInput.value = '';\r\n    fetch('/get-books', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }, body: JSON.stringify({ bookName })\r\n    })\r\n      .then(r => r.json())\r\n      .then(data => {\r\n        setSelectedBooks(data.books);\r\n      });\r\n\r\n  }\r\n\r\n  function deleteBook(e){\r\n    // let key = Number(e.target.key);\r\n    // console.log(key);\r\n    // let tempBooks = [...selectedBooks];\r\n    // setSelectedBooks(books);\r\n  }\r\n\r\n  return (\r\n    <div className='body book-search'>\r\n      <h4> Search Book By Name:</h4>\r\n      <input name=\"search\" className='template-input' placeholder=\"add book's name\"></input>\r\n      <Button onClick={getBook} innerText='Search' />\r\n      <div className='display-books'>\r\n      {selectedBooks.map((book, index) =>\r\n        <div className=\"book-info-container\" key={index}>\r\n          <div className=\"book-info\" >\r\n            <p>Book Name: {book.name}</p>\r\n            <p>Year of Publish: {book.year}</p>\r\n            <p>Author: {book.author}</p>\r\n          </div>\r\n          <Button key={index} className='delete' innerText='Delete' onClick={(e) => deleteBook(e)}></Button>\r\n\r\n        </div>\r\n      )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BookSearch;","import './App.css';\r\nimport React, { useState } from \"react\";\r\nimport Form from './components/Form';\r\nimport BookSearch from './components/BookSearch';\r\n\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\n\r\nexport default function App() {\r\n\r\n  function toggleClassName(e) {\r\n    if (e.target.tagName.toLowerCase() != 'a') {\r\n      e.target = e.target.parentNode;\r\n    }\r\n    let allTabs = document.querySelectorAll('nav>ul>a');\r\n    allTabs.forEach(tab => tab.classList.remove('active-nav'));\r\n    e.target.classList.add('active-nav');\r\n  }\r\n\r\n  return (\r\n    <Router>\r\n      <nav className='all-tabs' >\r\n        <ul onClick={(e) => toggleClassName(e)}>\r\n          <Link className='nav active-nav' to=\"/\">\r\n            <li>\r\n              Book Add\r\n          </li>\r\n          </Link>\r\n          <Link className='nav' to=\"/BookSearch\">\r\n            <li>\r\n              Search Book\r\n            </li>\r\n          </Link>\r\n        </ul>\r\n      </nav>\r\n\r\n      {/* A <Switch> looks through its children <Route>s and\r\n            renders the first one that matches the current URL. */}\r\n      <Switch>\r\n        <Route path=\"/BookSearch\">\r\n          <BookSearch />\r\n        </Route>\r\n        <Route path=\"/\">\r\n          <Form />\r\n        </Route>\r\n      </Switch>\r\n    </Router>\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}