{"version":3,"sources":["components/Button.js","components/Form.js","components/BookSearch.js","App.js","reportWebVitals.js","index.js"],"names":["Button","onClick","innerText","type","style","Form","useState","massage","state","confirmMassage","setConfirmMassage","className","onSubmit","e","preventDefault","placeholder","inputs","document","querySelectorAll","values","map","input","value","bookInfo","name","year","author","fetch","method","headers","body","JSON","stringify","then","r","json","data","success","error","setTimeout","BookSearch","App","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"gPASeA,MAPf,YAA6D,IAA5CC,EAA2C,EAA3CA,QAASC,EAAkC,EAAlCA,UAAkC,IAAvBC,YAAuB,MAAlB,OAAkB,EAExD,OAFwD,EAAVC,MAG1C,yBAAQH,QAASA,EAASE,KAAMA,EAAhC,cAAwCD,EAAxC,QC+COG,MAhDf,WAAiB,IAAD,EACgCC,mBAAS,CAAEC,QAAS,GAAIC,OAAO,IAD/D,mBACLC,EADK,KACWC,EADX,KA6BZ,OACI,uBAAMC,UAAU,OAAOC,SAAU,SAACC,GAAD,OAAOA,EAAEC,kBAA1C,UACI,sBAAKH,UAAU,YAAf,UACI,uBAAOA,UAAU,sBAAsBI,YAAY,oBACnD,uBAAOJ,UAAU,sBAAsBI,YAAY,+BACnD,uBAAOJ,UAAU,sBAAsBI,YAAY,sBACnD,cAAC,EAAD,CAAQd,QAjCpB,WAEI,IAAIe,EAAM,YAAOC,SAASC,iBAAiB,UACvCC,EAASH,EAAOI,KAAI,SAAAC,GAAK,OAAIA,EAAMC,SACvCN,EAAOI,KAAI,SAAAC,GAAK,OAAIA,EAAMC,MAAQ,MAClC,IAAIC,EAAW,CACXC,KAAML,EAAO,GACbM,KAAMN,EAAO,GACbO,OAAQP,EAAO,IAEnBQ,MAAM,YAAa,CACfC,OAAQ,OACRC,QAAS,CACL,eAAgB,oBACjBC,KAAMC,KAAKC,UAAU,CAAET,eAEzBU,MAAK,SAAAC,GAAC,OAAIA,EAAEC,UACZF,MAAK,SAAAG,GACF,IAAI7B,EAAU6B,EAAKC,QAAU,kCACxBD,EAAKE,MAAQF,EAAKE,MAAQ,kCAE/B5B,EAAkB,CAAEH,QAASA,EAASC,OAAO,IAC7C+B,YAAW,WACP7B,EAAkB,CAAEH,QAAS,GAAIC,OAAO,MACzC,SASuBN,UAAU,WAAWC,KAAK,cAGvDM,EAAeD,MAAQ,sBAAKG,UAAU,iBAAf,cAAiC,mCAAMF,EAAeF,cAAsB,OCjBjGiC,MArBf,WAaE,OACE,qBAAK7B,UAAU,eAAf,SACE,cAAC,EAAD,CAAQV,QAZZ,WACE0B,MAAM,aACHM,MAAK,SAAAC,GAAC,OAAIA,EAAEC,WAUajC,UAAU,c,eCP3B,SAASuC,IAEtB,OACE,cAAC,IAAD,UAcI,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,cAAZ,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,IAAZ,SACE,cAAC,EAAD,WClCZ,IAYeC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFpC,SAASqC,eAAe,SAM1BX,M","file":"static/js/main.16982f64.chunk.js","sourcesContent":["\r\n\r\nfunction Button({onClick, innerText, type='text' ,style=''}){\r\n\r\n    return(\r\n        <button onClick={onClick} type={type}> {innerText} </button>\r\n    );\r\n}\r\n\r\nexport default Button;","import { useState } from 'react';\r\n// import { Link } from 'react-router-dom';\r\nimport Button from './Button';\r\n\r\nfunction Form() {\r\n    const [confirmMassage, setConfirmMassage] = useState({ massage: '', state: false });\r\n    function addBook() {\r\n\r\n        let inputs = [...document.querySelectorAll('input')];\r\n        let values = inputs.map(input => input.value);\r\n        inputs.map(input => input.value = '');\r\n        let bookInfo = {\r\n            name: values[0],\r\n            year: values[1],\r\n            author: values[2]\r\n        };\r\n        fetch('/add-book', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }, body: JSON.stringify({ bookInfo })\r\n        })\r\n            .then(r => r.json())\r\n            .then(data => {\r\n                let massage = data.success ? 'The Book Was Added Successfully' : \r\n                    (data.error ? data.error : 'Book not added! try again later');\r\n\r\n                setConfirmMassage({ massage: massage, state: true });\r\n                setTimeout(() => {\r\n                    setConfirmMassage({ massage: '', state: false });\r\n                }, 10000);\r\n            });\r\n    }\r\n    return (\r\n        <form className='body' onSubmit={(e) => e.preventDefault()}>\r\n            <div className=\"add-input\">\r\n                <input className='add-candidate-input' placeholder=\"add book's name\"></input>\r\n                <input className='add-candidate-input' placeholder=\"add book's year of publish\"></input>\r\n                <input className='add-candidate-input' placeholder=\"add author's name\"></input>\r\n                <Button onClick={addBook} innerText='Add Book' type='submit' />\r\n            </div >\r\n\r\n            {confirmMassage.state ? <div className='confim-massage'> <h2> {confirmMassage.massage}</h2></div> : ''}\r\n            {/* <div className=\"lottery-btn hide\">\r\n                <Link to=\"/confirmation\" >\r\n                    <Button onClick={goToLottery} innerText=' Go To Lottery' /> \r\n                </Link>\r\n            </div > */}\r\n        </form >\r\n    );\r\n}\r\n\r\nexport default Form;","\r\nimport { useState } from \"react\";\r\nimport Button from './Button';\r\n\r\nfunction BookSearch() {\r\n\r\n  // const [selectedCandidates, setSelectedCandidates] = useState([]);\r\n  function getBook() {\r\n    fetch('/get-book')\r\n      .then(r => r.json())\r\n      // .then(data => {\r\n      //   setSelectedCandidates(data.candidates.map(candidateInfo => candidateInfo.name));\r\n      // });\r\n\r\n  }\r\n\r\n\r\n  return (\r\n    <div className='body lottery'>\r\n      <Button onClick={getBook} innerText='Search' />\r\n      {/* {selectedCandidates.map((candidate, index) => <p key={index}> {candidate} </p>)} */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BookSearch;","import './App.css';\r\nimport React, { useState } from \"react\";\r\nimport Form from './components/Form';\r\nimport BookSearch from './components/BookSearch';\r\n\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\n\r\nexport default function App() {\r\n\r\n  return (\r\n    <Router>\r\n      {/* <nav className='all-tabs'>\r\n          <ul>\r\n            <li className='active-nav'>\r\n              <Link to=\"/\">Book Add</Link>\r\n            </li>\r\n            <li className='non-active-nav'>\r\n              <Link to=\"/form-create\">Search Book</Link>\r\n            </li>\r\n          </ul>\r\n        </nav> */}\r\n\r\n        {/* A <Switch> looks through its children <Route>s and\r\n            renders the first one that matches the current URL. */}\r\n        <Switch>\r\n          <Route path=\"/BookSearch\">\r\n            <BookSearch />\r\n          </Route>\r\n          <Route path=\"/\">\r\n            <Form />\r\n          </Route>\r\n        </Switch>\r\n    </Router>\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}